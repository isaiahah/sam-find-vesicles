# Expand the spline generated by pick_membrane.py or repick_membrane.py by
# a specified distance

import numpy as np
from argparse import ArgumentParser
import sys
import os
from pathlib import Path


# Parse command line arguments
parser = ArgumentParser(
    prog="dilate_picks.py",
    description="Expand a spline of membrane coordinates to a band, by dilating each coordinate to a circle centered around it"
)
parser.add_argument(
    "picks_dir", 
    type=str,
    help="Directory containing npy arrays of membrane coordinates"
)
parser.add_argument(
    "psize",
    type=float,
    help="Width of each pixel, in A"
)
parser.add_argument(
    "pixels_x",
    type=int,
    help="Number of pixels in the image x direction"
)
parser.add_argument(
    "pixels_y",
    type=int,
    help="Number of pixels in the image y direction"
)
parser.add_argument(
    "out_dir",
    type=str,
    help="Directory to store npy arrays of dilated coordinates"
)
parser.add_argument(
    "--membrane_width",
    type=float,
    help="Width of the membrane and dilation diameter for pick coordinates, in A",
    default=8
)

args = parser.parse_args()
picks_dir = args.picks_dir
psize = args.psize
pixels_x = args.pixels_x
pixels_y = args.pixels_y
out_dir = args.out_dir
dilation_radius = args.membrane_width / (2 * psize)


picks_dir_files = [entry for entry in os.scandir(picks_dir) if entry.is_file()]
picks_dir_filenames = [entry.name for entry in picks_dir_files]
vesicles = set("_".join(entry.name.split("_")[:-1]) for entry in picks_dir_files if entry.name.endswith(".npy"))
picks_dir_path = Path(picks_dir)
out_dir_path = Path(out_dir)
for vesicle in vesicles:
    inner_picks_file = f"{vesicle}_inner.npy"
    if inner_picks_file not in picks_dir_filenames:
        print(f"Missing file {inner_picks_file}", file=sys.stderr)
    else:
        inner_picks = np.load(picks_dir_path / inner_picks_file)
        inner_dilated = set()
        for particle in inner_picks:
            for deltaX in range(-int(dilation_radius), int(dilation_radius) + 1):
                maxY = (dilation_radius ** 2 - deltaX ** 2) ** 0.5
                for deltaY in range(-int(maxY), int(maxY) + 1):
                    if 0 <= particle[0] + deltaX < pixels_x and 0 <= particle[1] + deltaY < pixels_y:
                        inner_dilated.add((particle[0] + deltaX, particle[1] + deltaY))
        inner_dilated = np.array(list(inner_dilated))
        np.save(out_dir_path / f"{vesicle}_inner_dilated.npy", inner_dilated)
    
    outer_picks_file = f"{vesicle}_outer.npy"
    if outer_picks_file not in picks_dir_filenames:
        print(f"Missing file {outer_picks_file}", file=sys.stderr)
    else:
        outer_picks = np.load(picks_dir_path / outer_picks_file)
        outer_dilated = set()
        for particle in outer_picks:
            for deltaX in range(-int(dilation_radius), int(dilation_radius) + 1):
                maxY = (dilation_radius ** 2 - deltaX ** 2) ** 0.5
                for deltaY in range(-int(maxY), int(maxY) + 1):
                    if 0 <= particle[0] + deltaX < pixels_x and 0 <= particle[1] + deltaY < pixels_y:
                        outer_dilated.add((particle[0] + deltaX, particle[1] + deltaY))
        outer_dilated = np.array(list(outer_dilated))
        np.save(out_dir_path / f"{vesicle}_outer_dilated.npy", outer_dilated)


# Optional: After generating splines, return here and run this code to repick the membrane from those splines
# masks_edges = [splines[i] for i in range(2, len(splines), 3)]
# masks_edges = [[np.array(particle) for particle in edge] for edge in masks_edges]
